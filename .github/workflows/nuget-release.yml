name: Release and Publish NuGet Package

on:
  push:
    branches:
      - main

jobs:
  build-test-pack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Versionize
        run: dotnet tool install --global Versionize

      - name: Setup git
        run: |
          git config --local user.email "227396731+midnightmeshllc@users.noreply.github.com"
          git config --local user.name "midnightmeshllc"

      - name: Run Versionize (versioning & changelog)
        run: versionize --exit-insignificant-commits --version-file ../versionize/version.txt --configDir ../versionize
        continue-on-error: false

      - name: Get Version from Versionize
        id: get_version
        run: |
          if [ -f .versionize/version.txt ]; then
            echo "version=$(cat .versionize/version.txt)" >> $GITHUB_OUTPUT
          else
            echo "version=1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Restore dependencies
        run: dotnet restore Midnight.SOAP.SDK/Midnight.SOAP.SDK.csproj

      - name: Build
        run: dotnet build Midnight.SOAP.SDK/Midnight.SOAP.SDK.csproj --configuration Release --no-restore

      # - name: Test
      #   run: dotnet test --no-build --verbosity normal

      - name: Pack NuGet package
        run: dotnet pack Midnight.SOAP.SDK/Midnight.SOAP.SDK.csproj --configuration Release --no-build --output ./nupkg /p:Version=${{ steps.get_version.outputs.version }}

      - name: Publish to NuGet
        run: dotnet nuget push ./nupkg/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Unable to Create Release
        if: steps.get_version.outcome != 'success'
        run: echo "Unable to create release due to Versionize error."

      - name: Push changes to GitHub
        if: steps.get_version.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.ref }}
          tags: true

      - name: Create GitHub Release
        if: steps.get_version.outcome == 'success'
        uses: actions/github-script@v5
        with:
          github-token: "${{ github.token }}"
          script: |
            try 
            {
              const version = "${{ steps.get_version.outputs.version }}";
              const tags_url = context.payload.repository.tags_url + "?per_page=1"
              const changelog = require('fs').readFileSync('./CHANGELOG.md', 'utf8');
              const result = await github.request(tags_url)
              const current_tag = result.data[0].name
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: `Release ${version}`,
                owner: context.repo.owner,
                body: changelog,
                files: ./nupkg/*.nupkg,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: version,
              });
            } 
            catch (error) 
            {
            core.setFailed(error.message);
            }